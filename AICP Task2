# Constants
NUM_COACHES = 6
SEATS_PER_COACH = 80
TICKET_PRICE = 25.00

# Data structures to store information
available_tickets = {
    '09:00': NUM_COACHES * SEATS_PER_COACH,
    '11:00': NUM_COACHES * SEATS_PER_COACH,
    '13:00': NUM_COACHES * SEATS_PER_COACH,
    '15:00': NUM_COACHES * SEATS_PER_COACH,
    '10:00': NUM_COACHES * SEATS_PER_COACH + 2,  # Extra coaches on the last train
    '12:00': NUM_COACHES * SEATS_PER_COACH + 2,
    '14:00': NUM_COACHES * SEATS_PER_COACH + 2,
    '16:00': NUM_COACHES * SEATS_PER_COACH + 2
}

# Data structures for total passengers and total money
total_passengers = {key: 0 for key in available_tickets.keys()}
total_money = {key: 0 for key in available_tickets.keys()}

# Task 1 - Start of the day
# Nothing specific to do at the start of the day as per the provided requirements

# Task 2 - Purchasing tickets
a = input("Enter the time (09:00 to 16:00): ")
b = int(input("Enter the number of seats you want to book: "))

if a not in available_tickets or b > available_tickets[a]:
    print("Enter a Valid Entry!")
else:
    available_tickets[a] = available_tickets[a] - b
    print(f"Seats Left for {a}: {available_tickets[a]}")
    Price = TICKET_PRICE * b

    # Task 2 - Group discount
    if b >= 10:
        Free_Tickets = b // 10
        Price -= Free_Tickets * TICKET_PRICE
        print(f"Free tickets: {Free_Tickets}, Total Price: {Price}")
    else:
        print(f"Total Money: {Price}")

    # Update total passengers and total money
    total_passengers[a] += b
    total_money[a] += Price

# Task 3 - End of the day
for journey, passengers in total_passengers.items():
    print(f"Journey {journey}: Passengers: {passengers}, Total Money: {total_money[journey]}")

# Calculate total number of passengers and total money for the day
total_passengers_day = sum(total_passengers.values())
total_money_day = sum(total_money.values())

print(f"Total Passengers for the day: {total_passengers_day}")
print(f"Total Money collected for the day: {total_money_day}")

# Find and display the train journey with the most passengers
max_passengers_journey = max(total_passengers, key=total_passengers.get)
print(f"Train journey with the most passengers: {max_passengers_journey}")
